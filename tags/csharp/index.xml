<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CSharp on Mars's Blog</title><link>https://mars23003.github.io/blog/tags/csharp/</link><description>Recent content in CSharp on Mars's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 16 May 2024 07:18:40 +0800</lastBuildDate><atom:link href="https://mars23003.github.io/blog/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>C# 存取修飾詞筆記</title><link>https://mars23003.github.io/blog/posts/csharp/accessmodifiers/</link><pubDate>Thu, 16 May 2024 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/accessmodifiers/</guid><description>在C#中，我們可以使用不同的存取修飾詞來控制類型或成員的可訪問性。這些存取修飾詞可以影響其他程式碼對類型或成員的存取範圍，以下是各種存取修飾詞及其作用：</description></item><item><title>[C#] DateTime vs DateTimeOffset 時區問題處理</title><link>https://mars23003.github.io/blog/posts/csharp/datetimeoffsetanddatetime/</link><pubDate>Thu, 11 May 2023 08:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/datetimeoffsetanddatetime/</guid><description>時區的處理是一個很重要的問題。在這裡，我們將會介紹如何使用 C# 的 DateTime、DateTimeOffset、TimeZoneInfo 來解決時區問題。</description></item><item><title>[C#] Lazy&lt;T> 類別：如何實現延遲初始化</title><link>https://mars23003.github.io/blog/posts/csharp/lazy/</link><pubDate>Thu, 13 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/lazy/</guid><description>在 C# 中，Lazy&amp;lt;T&amp;gt; 是一個用於延遲初始化的類別。本文將介紹 Lazy&amp;lt;T&amp;gt; 的用法、好處以及實作方法，幫助您更好地理解這個重要的 C# 類別。</description></item><item><title>[C#] 基本數據類型：整數、浮點數、字符、布林、字串和物件</title><link>https://mars23003.github.io/blog/posts/csharp/types/</link><pubDate>Fri, 24 Mar 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/types/</guid><description>本文介紹了 C# 中的六種基本數據類型：整數、浮點數、字符、布林、字串和物件。了解這些數據類型有助於寫出高效、正確的 C# 程式。</description></item><item><title>[C#] 掌握 EF Core 的載入策略：Eager Loading、Lazy Loading和 Explicit Loading</title><link>https://mars23003.github.io/blog/posts/csharp/efcore/eager-lazy-explicitloading/</link><pubDate>Wed, 22 Mar 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/efcore/eager-lazy-explicitloading/</guid><description>本文深入探討了EF Core中的Eager Loading、Lazy Loading和Explicit Loading等不同的載入策略。我們探討了這些載入策略的優缺點，以及如何使用它們來優化您的資料庫查詢。此外，我們還提供了實用的範例來演示每種載入策略如何在EF Core中實現。</description></item><item><title>[C#]3分鐘帶你了解淺層複製(Shallow Cpoy)與深層複製(Deep Copy)</title><link>https://mars23003.github.io/blog/posts/csharp/shallowcopy-and-deepcpoy/</link><pubDate>Wed, 07 Sep 2022 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/shallowcopy-and-deepcpoy/</guid><description>當我們有物件需要複製的情境時會探討到淺層複製與深層複製的問題， 淺層複製會遇到什麼樣的問題嗎?亦或是如何使用深層複製? 該篇文章將會做一個簡單整理。 。</description></item><item><title>[C#] 3分鐘帶你了解ValueType與ReferenceType</title><link>https://mars23003.github.io/blog/posts/csharp/valuetype-and-referencetype/</link><pubDate>Tue, 06 Sep 2022 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/valuetype-and-referencetype/</guid><description>使用實值型別時，每個變數都有自己的資料複本，因此對某一個變數進行的作業，不會影響另一個變數。 使用參考類型時，這兩種變數可以參考相同的物件，因此對其中一個變數進行的作業可能會影響另一個變數所參考的物件。</description></item><item><title>[C#] 方法參數in、ref、out、params關鍵字看這篇就夠了</title><link>https://mars23003.github.io/blog/posts/csharp/methodparameters/</link><pubDate>Fri, 02 Sep 2022 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/methodparameters/</guid><description>當一個方法不包含in、ref或out時， 其參數會按照值的方式傳遞給方法， 在方法內可以更改參數的值，但是呼叫完方法後，更改的參數值不會保存下來， 為了處理這種開發需求，可以在方法帶入參數時使用這些關鍵字來改變此行為。</description></item><item><title>[C#] 3分鐘帶你了解如何利用 NUnit 進行單元測試</title><link>https://mars23003.github.io/blog/posts/csharp/nunit/</link><pubDate>Mon, 29 Aug 2022 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/csharp/nunit/</guid><description>如何利用 NUnit 進行單元測試</description></item></channel></rss>