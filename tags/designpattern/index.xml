<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DesignPattern on Mars's Blog</title><link>https://mars23003.github.io/blog/tags/designpattern/</link><description>Recent content in DesignPattern on Mars's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 30 Apr 2023 08:18:40 +0800</lastBuildDate><atom:link href="https://mars23003.github.io/blog/tags/designpattern/index.xml" rel="self" type="application/rss+xml"/><item><title>[Design Pattern] 掌握設計模式：Adapter Pattern原理與應用</title><link>https://mars23003.github.io/blog/posts/designpattern/adapterpattern/</link><pubDate>Sun, 30 Apr 2023 08:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/adapterpattern/</guid><description>Adapter Pattern 是一種軟體設計模式，用於將一個類的介面轉換成客戶端所期望的另一種介面。本文將介紹 Adapter Pattern 的模式名稱、問題、解決方案、結果等要素，並提供 C# 的範例。</description></item><item><title>[Design Pattern] 掌握設計模式：Prototype Pattern原理與應用</title><link>https://mars23003.github.io/blog/posts/designpattern/prototypepattern/</link><pubDate>Fri, 21 Apr 2023 01:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/prototypepattern/</guid><description>Prototype Pattern（原型模式）是一種創建型設計模式，其主要目的是透過複製已經存在的物件來建立新的物件，以避免重複的建立和初始化。這個模式可以幫助我們更有效地建立和管理物件。</description></item><item><title>[Design Pattern] 掌握設計模式：Builder Pattern原理與應用</title><link>https://mars23003.github.io/blog/posts/designpattern/builderpattern/</link><pubDate>Tue, 18 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/builderpattern/</guid><description>了解Builder Pattern的應用，以及如何使用範例程式碼實現這種軟體設計模式。掌握如何使用Builder Pattern創建複雜的物件。</description></item><item><title>[Design Pattern] 掌握設計模式：Abstract Factory Pattern原理與應用</title><link>https://mars23003.github.io/blog/posts/designpattern/abstractfactorypattern/</link><pubDate>Mon, 17 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/abstractfactorypattern/</guid><description>了解 Abstract Factory 設計模式的概念、問題、解決方案和實現方法，以及使用該模式的優點和適用場景。</description></item><item><title>[Design Pattern] 透視工廠模式：簡單工廠、工廠方法、抽象工廠的差異分析</title><link>https://mars23003.github.io/blog/posts/designpattern/factorycomparison/</link><pubDate>Mon, 17 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/factorycomparison/</guid><description>本文介紹了三種常見的工廠模式：工廠方法模式、簡單工廠模式和抽象工廠模式，並進行了比較。比較項目包括：定義方式、產品種類、產品創建、產品擴充、彈性程度、複雜度和適用場景等。讀者可以從本文中了解到每種工廠模式的優缺點和適用場景，以及如何根據需求選擇最適合的工廠模式。</description></item><item><title>[Design Pattern] 掌握設計模式：Factory Method Pattern原理與應用</title><link>https://mars23003.github.io/blog/posts/designpattern/factorymethodpattern/</link><pubDate>Thu, 13 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/factorymethodpattern/</guid><description>Factory Method Pattern是一種常用的設計模式，它通過定義一個創建對象的接口，將對象的創建過程封裝在一個工廠方法中。這種模式可以提高程式碼的靈活性和可擴展性，並且易於進行單元測試和可重用性。本文將介紹Factory Method Pattern的基本概念、實現方式以及應用場景。</description></item><item><title>物件導向設計：SOLID原則的設計思想</title><link>https://mars23003.github.io/blog/posts/designpattern/solid/</link><pubDate>Tue, 11 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/solid/</guid><description>SOLID原則是物件導向程式設計中最基本的原則，透過遵循這些原則，可以使程式碼易於擴展、易於維護，同時也可以提高程式碼的可讀性和可靠性。本文將深入探討SOLID原則的內容和重要性。</description></item><item><title>[Design Pattern] 掌握設計模式：Singleton Pattern原理與應用</title><link>https://mars23003.github.io/blog/posts/designpattern/singletonpattern/</link><pubDate>Mon, 10 Apr 2023 07:18:40 +0800</pubDate><guid>https://mars23003.github.io/blog/posts/designpattern/singletonpattern/</guid><description>Singleton Pattern 是一種常用的設計模式，旨在確保一個類只有一個實例存在...</description></item></channel></rss>